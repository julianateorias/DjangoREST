Query_sets

Abrir o console interativo do django
(venv) $ python manage.py shell

Importar a classe Snippet em models para manipular objetos no banco de dados.

>>> from snippets.models import Snippet
>>> Snippet.objects.all()
[<Snippet: Snippet object>, <Snippet: Snippet object>, <Snippet: Snippet object>]

>>> Snippet.objects.create(title='testeshell', code='bar="Hello, World!"\n')
<Snippet: Snippet object>

>>> snippet = Snippet.objects.get(id=4)
>>> snippet.title
'testeshell'

>>> Snippet.objects.filter(code__contains='bar')
[<Snippet: Snippet object>, <Snippet: Snippet object>]


Model Fields:
ref: https://docs.djangoproject.com/en/1.10/ref/models/fields/#field-types


Field Types e Field Options

Field Options:
(Argumentos que são válidos em todos os Tipos de Campo)

a) null
 default é False. Se null=True, django armazena valores vazios como null na database.
 Evitar usar em CharField e TextFiel, porque valores de string vazias vão sempre armazenar como string vazias, não
 como nulas, e geralmente é redudante ter as duas opções: nula e vazia. A convenção do django é usar empty, não null.
 Para ambos campos baseados em strings ou não, é necessário setar também blank=True, se desejar permitir empty values
 em forms, já que o parâmetro null apenas afeta database storage.
 Em BooleanField, usar NullBooleandField.

b) blank
 default é False. Se blank=True, é permitido ao campo ser blank (em branco).
 A diferença entre null e blank é que null é puramente relacionado a database, enquanto que blank está relacionado a
 validação. Se um campo tem blank=True, a validação do form aceita entrada de empty value para o campo.

c) choices
 Uma iteração (lista ou tupla, que pode se repetir) que consiste de iteráveis de exatamente dois itens [(A,B), (A,B)...]
 para escolher para o campo. Quando usado, o default form widget vai ser um select box com essas opções ao
 invés do campo de texto padrão.
 O primeiro elemento em cada tupla é o valor a ser setado no modelo, e o segundo elemento é um nome legível ao usuário.
 Geralmente é melhor definir choises dentro de uma classe de modelo, e definir um nome adequado pra cada valor:

 from django.db import models

 class Student(models.Model):
    FRESHMAN = 'FR'
    SOPHOMORE = 'SO'
    JUNIOR = 'JR'
    SENIOR = 'SR'
    YEAR_IN_SCHOOL_CHOICES = (
        (FRESHMAN, 'Freshman'),
        (SOPHOMORE, 'Sophomore'),
        (JUNIOR, 'Junior'),
        (SENIOR, 'Senior'),
    )
    year_in_school = models.CharField(
        max_length=2,
        choices=YEAR_IN_SCHOOL_CHOICES,
        default=FRESHMAN,
    )

    def is_upperclass(self):
        return self.year_in_school in (self.JUNIOR, self.SENIOR)

 Embora seja possível definir choice list fora de uma classe model e então fazer a referência.

 Também é possível coletar choises disponíveis em grupos de nomes que podem ser usados para fins de organização:

 MEDIA_CHOICES = (
    ('Audio', (
            ('vinyl', 'Vinyl'),
            ('cd', 'CD'),
        )
    ),
    ('Video', (
            ('vhs', 'VHS Tape'),
            ('dvd', 'DVD'),
        )
    ),
    ('unknown', 'Unknown'),
 )


d) db_column
Para escolher o nome da coluna na database para este campo. Se não é informado, o django utiliza o nome do campo.
Se o nome da coluna for uma palavra reservada do SQL,








